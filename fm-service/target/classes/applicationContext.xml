<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
">

    <!--扫描Service层-->
    <context:component-scan base-package="cn.charge.ssmv.service" />

    <!--引入jdbc.properties-->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!--创建数据源(dataSource)-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    <!--
        咱们以前学过JPA,JPA的话需要配置EntityManagerFactory(需要读取配置,做很多事情都能配置)
            咱们使用了一个FactoryBean完成 -> EntityManagerFactoryBean
        配置SqlSessionFactory需要读取配置,做很多事情都能配置),它有一个叫做SqlSessionFactoryBean
     -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!--XML的映射-->
        <property name="mapperLocations" value="classpath:cn/charge/ssmv/mapper/*.xml" />
        <!--为所有相应的包中的类取别名-->
        <property name="typeAliasesPackage" value="cn.charge.ssmv.domain" />

        <!--配置一个拦截器(分页插件):注意一下版本问题-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>helperDialect=mysql</value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!--一劳永逸的方案:直接创建所有的映射器mapper-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.charge.ssmv.mapper" />
    </bean>

    <!--我们需要配置一个事务管理器
        以前学习JPA ,是有一个类JpaTransactionManager的事务对象
        mybatis用的是:DataSourceTransactionManager
    -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--配置标签支持事务-->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!--引入shiro的配置文件-->
    <import resource="classpath:applicationContext-shiro.xml"/>
    <import resource="classpath:applicationContext-timer.xml"/>


    <!--文件上传下载-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"></property>
        <property name="maxUploadSize" value="5242440"></property>
    </bean>



</beans>